name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  setup-workflow:
    name: "Setup workflow"
    runs-on: ubuntu-latest
    outputs:
      GITHUB_REPOSITORY_NAME: ${{ steps.cache.outputs.GITHUB_REPOSITORY_NAME }}
      VERSION: ${{ steps.cache.outputs.VERSION }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Set outputs
        id: cache
        run: |
          # Exposes org_name/repository_name in lower case. Required by docker.
          echo "::set-output name=GITHUB_REPOSITORY_NAME::$(echo ${GITHUB_REPOSITORY,,})"
          echo "::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}"

  build-binary:
    name: Build binary
    runs-on: ubuntu-20.04
    needs: setup-workflow
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # There is an issue with the latest starport, especially 0.18 version
      - name: Download and install starport
        run: wget -qO- https://github.com/tendermint/starport/releases/download/v0.18.6/starport_0.18.6_linux_amd64.tar.gz | tar xvz -C /tmp/ && sudo cp /tmp/starport /usr/bin

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # FIXME: Starport requires full repository

      - name: Build
        run: |
          starport chain build --release
          tar xzvf release/cheqd-node_linux_amd64.tar.gz

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-noded
          path: cheqd-noded

  build-deb-package:
    name: Build deb package
    runs-on: ubuntu-20.04
    needs: build-binary
    steps:
      - uses: actions/checkout@v2

      - name: Load binary artifact
        uses: actions/download-artifact@v2
        with:
          name: cheqd-noded
          path: /home/runner/go/bin

      - name: Restore binary permissions
        run: sudo chmod +x /home/runner/go/bin/cheqd-noded

      - name: Make archive
        working-directory: ./build_tools
        run: |
          ./build_tar.sh ${{ env.PACKAGE_NAME }} ${{ env.VERSION }}

      - name: Install fpm
        run: |
          sudo apt-get install ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm

      - name: Build deb
        run: |
          ./build_deb.sh ${{ env.PACKAGE_NAME }} ${{ env.VERSION }}
        working-directory: ./build_tools

      - name: Store deb package artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}_${{ env.VERSION }}_amd64.deb
          path: build_tools/output/${{ env.PACKAGE_NAME }}_${{ env.VERSION }}_amd64.deb

  build-node-image:
    name: Build cheqd-node image
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # FIXME: Starport requires full repository

      - name: Build
        run: docker build -f docker/cheqd_node/Dockerfile --no-cache -t cheqd-node  --build-arg UID=$(id -u) --build-arg GID=$(id -g) . # TODO: Get rid of UID and GID

      - name: Save
        run: docker save -o cheqd-node.tar cheqd-node

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-node.tar
          path: cheqd-node.tar

  build-testnet-image:
    name: Build cheqd-testnet image
    runs-on: ubuntu-20.04
    needs: build-node-image
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Download node image
        uses: actions/download-artifact@v2
        with:
          name: cheqd-node.tar

      - name: Load node image
        run: docker load -i cheqd-node.tar

      - name: Build
        run: docker build -f docker/single_image_testnet/Dockerfile --no-cache -t cheqd-testnet .

      - name: Save
        run: docker save -o cheqd-testnet.tar cheqd-testnet

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-testnet.tar
          path: cheqd-testnet.tar

#  publish-images:
#    name: "Publish docker images"
#    # Reference to workflow-setup job is required to access its various outputs.
#    needs: setup-workflow
#    runs-on: ubuntu-latest
#    env:
#      GITHUB_REPOSITORY_NAME: ${{ needs.setup-workflow.outputs.GITHUB_REPOSITORY_NAME }}
#      VERSION: ${{ needs.setup-workflow.outputs.VERSION }}
#      TESTNET_IMAGE_NAME: "cheqd-testnet"
#      STARPORT_RELEASE_PARAMS: "--release"
#    steps:
#      - name: Git checkout
#        uses: actions/checkout@v2
#
#      - name: Login to docker
#        run: |
#          echo ${{ secrets.GH_PAT }} | docker login ghcr.io --username ${{ secrets.GH_USER }} --password-stdin
#
#      - name: Build node image
#        run: |
#          docker build -f docker/cheqd_node/Dockerfile.release \
#              --no-cache \
#              --build-arg STARPORT_RELEASE_PARAMS=${{ env.STARPORT_RELEASE_PARAMS }} \
#              -t cheqd-node .
#      - name: Build testnet image
#        run: |
#          docker build -f docker/single_image_testnet/Dockerfile --no-cache -t cheqd-testnet .
#      - name: Push node image
#        run: |
#          docker tag cheqd-node ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}:${{ env.VERSION }}
#          docker tag cheqd-node ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}:latest
#          docker push ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}:${{ env.VERSION }}
#          docker push ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}:latest
#      - name: Push testnet image
#        run: |
#          docker tag cheqd-testnet ghcr.io/${{ github.repository_owner }}/${{ env.TESTNET_IMAGE_NAME }}:${{ env.VERSION }}
#          docker tag cheqd-testnet ghcr.io/${{ github.repository_owner }}/${{ env.TESTNET_IMAGE_NAME }}:latest
#          docker push ghcr.io/${{ github.repository_owner }}/${{ env.TESTNET_IMAGE_NAME }}:${{ env.VERSION }}
#          docker push ghcr.io/${{ github.repository_owner }}/${{ env.TESTNET_IMAGE_NAME }}:latest
#
#  publish-release:
#    name: "Publish release"
#    needs: [setup-workflow, publish-images]
#    runs-on: "ubuntu-latest"
#    env:
#      GITHUB_REPOSITORY_NAME: ${{ needs.setup-workflow.outputs.GITHUB_REPOSITORY_NAME }}
#      VERSION: ${{ needs.setup-workflow.outputs.VERSION }}
#      OUTPUT_DIR: "output"
#      PACKAGE_NAME: "cheqd-node"
#      RELEASE_TAG: ${{ needs.setup-workflow.outputs.VERSION }}
#      STARPORT_RELEASE_PARAMS: "--release"
#    steps:
#      - name: Set up Go 1.17
#        uses: actions/setup-go@v2
#        with:
#          go-version: 1.17
#
#      # There is an issue with the latest starport, especially 0.18 version
#      - name: Install starport
#        run: wget -qO- https://github.com/tendermint/starport/releases/download/v0.18.6/starport_0.18.6_linux_amd64.tar.gz \
#             | tar xvz -C /tmp/ && sudo cp /tmp/starport /usr/bin
#
#      - name: Git checkout
#        uses: actions/checkout@v2
#
#      - name: Build
#        run: starport chain build ${{ env.STARPORT_RELEASE_PARAMS }}
#
#      # It looks ugly cause starport chain build --release creates archive without version.
#      - name: Untar release
#        run: tar xzvf release/cheqd-node_linux_amd64.tar.gz && cp cheqd-noded /home/runner/go/bin/
#
#      - name: Changing version for deb packaging
#        run: |
#          echo "VERSION=$(echo ${{ env.VERSION }} | sed 's/v//')" >> $GITHUB_ENV
#
#      - name: Make archive
#        run: |
#          ./build_tar.sh ${{ env.PACKAGE_NAME }} ${{ env.VERSION }}
#        working-directory: ./build_tools
#
#      - name: Upload archive
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ env.PACKAGE_NAME }}_${{ env.VERSION }}.tar.gz
#          path: build_tools/${{ env.OUTPUT_DIR }}/${{ env.PACKAGE_NAME }}_${{ env.VERSION }}.tar.gz
#
#      - name: Install fpm
#        run: |
#          sudo apt-get install ruby ruby-dev rubygems build-essential
#          sudo gem install --no-document fpm
#
#      - name: Create deb package
#        run: |
#          ./build_deb.sh ${{ env.PACKAGE_NAME }} ${{ env.VERSION }}
#        working-directory: ./build_tools
#
#      - name: Upload deb
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ env.PACKAGE_NAME }}_${{ env.VERSION }}_amd64.deb
#          path: build_tools/${{ env.OUTPUT_DIR }}/${{ env.PACKAGE_NAME }}_${{ env.VERSION }}_amd64.deb
#
#      - uses: "marvinpinto/action-automatic-releases@latest"
#        with:
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          automatic_release_tag: "${{ env.RELEASE_TAG }}"
#          prerelease: false
#          files: |
#            build_tools/${{ env.OUTPUT_DIR }}/${{ env.PACKAGE_NAME }}_${{ env.VERSION }}_amd64.deb
#            build_tools/${{ env.OUTPUT_DIR }}/${{ env.PACKAGE_NAME }}_${{ env.VERSION }}.tar.gz
