name: Release

on:
  push:
    branches:
      - master
    tags:
      - "v*"

jobs:

  workflow-setup:
    runs-on: ubuntu-latest
    outputs:
      CACHE_KEY_BUILD: ${{ steps.cache.outputs.CACHE_KEY_BUILD }}
      CACHE_KEY_LINT: ${{ steps.cache.outputs.CACHE_KEY_LINT }}
      # Expose the lowercase version of the GitHub repository name
      # to all subsequent jobs that reference image repositories
      # as the push and pull operations require the URL of the repository
      # to be in lowercase.
      GITHUB_REPOSITORY_NAME: ${{ steps.cache.outputs.GITHUB_REPOSITORY_NAME }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Set outputs
        id: cache
        run: |
          echo "::set-output name=CACHE_KEY_BUILD::${{ hashFiles('Dockerfile') }}"
          # Convert the GitHub repository name to lowercase
          echo "::set-output name=GITHUB_REPOSITORY_NAME::$(echo ${GITHUB_REPOSITORY,,})"

  build-image:
    # Reference to workflow-setup job is required to access its various outputs.
    needs: workflow-setup
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_BUILD: ${{ needs.workflow-setup.outputs.CACHE_KEY_BUILD }}
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Try load from cache.
        id: cache-image
        uses: actions/cache@v2
        with:
          path: ${GITHUB_WORKSPACE}/cache
          key: ${{ env.CACHE_KEY_BUILD}}

      - name: If NOT found in cache, build and push image.
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          echo ${{ secrets.CR_PAT }} | docker login ghcr.io --username ${{ secrets.CR_USER }} --password-stdin
          docker build -f .github/workflows/build/Dockerfile --no-cache -t ${{ env.GITHUB_REPOSITORY_NAME }}/node-build:${{ env.CACHE_KEY_BUILD }} .
          docker tag ${{ env.GITHUB_REPOSITORY_NAME }}/node-build:${{ env.CACHE_KEY_BUILD }} ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/node-build:latest
          docker push ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/node-build:latest
          mkdir -p ${GITHUB_WORKSPACE}/cache
          touch ${GITHUB_WORKSPACE}/cache/${{ env.CACHE_KEY_BUILD }}

  tagged-release:
    name: "Tagged Release"
    runs-on: "ubuntu-latest"

    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out starport repo
      uses: actions/checkout@v2
      with:
          repository: tendermint/starport

    - name: Starport install
      run: make install

    - name: Check out back
      uses: actions/checkout@v2

    - name: Starport build
      run: starport build

    - name: Make archive
      run: |
        touch node.tar.gz
        tar -czf node.tar.gz --exclude=node.tar.gz .
    - name: Upload archive
      uses: actions/upload-artifact@v2
      with:
        name: node.tar.gz
        path: node.tar.gz

    - run: sudo apt-get install ruby ruby-dev rubygems build-essential
    - run: sudo gem install --no-document fpm

    - name: Creating deb package
      run: fpm -s tar -t deb -C ./node.tar.gz --name node --version ${{ GITHUB_REF }} --iteration 1  --description "A verim node" .

    - name: Upload deb
      uses: actions/upload-artifact@v2
      with:
        name: node_${{ GITHUB_REF }}-1_amd64.deb
        path: node_${{ GITHUB_REF }}-1_amd64.deb


    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: false
        files: |
          node.tar.gz
          node_${{ GITHUB_REF }}-1_amd64.deb


