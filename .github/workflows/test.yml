name: "Test"
on:
  workflow_call:
    inputs:
      VERSION:
        description: "Build version number"
        type: string
defaults:
  run:
    shell: bash
env:
  NODE_CONFIGS_BASE: "/home/runner/work/cheqd-node/cheqd-node/docker/localnet/network-config"


jobs:

  codeql-analysis:
    name: "Test: CodeQL Analysis"
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:      
      - name: Setup CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'go'
          queries: security-and-quality
      
      - name: Load binary artifact from build
        uses: actions/download-artifact@v3
        with:
          name: cheqd-noded

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  test-new-node-setup:
    name: "Test: Node setup"
    runs-on: ubuntu-latest

    steps:
      - name: Download Debian package
        uses: actions/download-artifact@v3
        with:
          name: cheqd-node_${{ inputs.VERSION }}_amd64.deb

      - name: Install Debian package
        run: sudo CHEQD_HOME_DIR=/home/runner/cheqd dpkg -i cheqd-node_${{ inputs.VERSION }}_amd64.deb

      - name: Download node Docker image
        uses: actions/download-artifact@v3
        with:
          name: cheqd-node-image.tar

      - name: Load node Docker image
        run: docker load -i cheqd-node-image.tar

      - name: Check out
        uses: actions/checkout@v3

      - name: Set up 4 validators + 2 observers node docker pool
        working-directory: ./docker/localnet
        run: |
          bash gen-network-config.sh
          CHEQD_NODE_IMAGE=cheqd-node CHEQD_NODE_VERSION=latest docker compose up -d

      - name: Wait for chain
        run: bash tests/tools/wait-for-chain.sh

      - name: Add observer node
        working-directory: ./tests/e2e-complex/deb-install
        run: |
          ./add-observer.sh
          cheqd-noded status -n tcp://localhost:26677 2>&1
          ./wait.sh "[[ $(cheqd-noded status -n 'tcp://localhost:26677' 2>&1 | wc -l) == 1 ]] && echo "New node returns status!""

      - name: Promote observer to validator
        working-directory: ./tests/e2e-complex/deb-install
        run: |
          ./promote-validator.sh
          cheqd-noded query staking validators --node "http://localhost:26657" | sed -nr 's/.*status: (.*?).*/\1/p' "$1" | while read -r x; do [[ "BOND_STATUS_BONDED" == "$x" ]] && echo "Validator's status is bonded!" || exit 1 ; done
          # shellcheck disable=SC2016
          ./wait.sh '[[ $(curl -s localhost:26657/block | sed -nr '"'"'s/.*signature": (.*?).*/\1/p'"'"' | wc -l) == 5 ]] && echo "There are 5 validators signatures in block!"'
          # shellcheck disable=SC2016
          ./wait.sh '[[ $(curl -s localhost:26657/block | sed -nr '"'"'s/.*(signature": null).*/\1/p'"'"' | wc -l) == 0 ]] && echo "There are no null signatures in block!"'

      - name: Gather logs on failure
        if: ${{ failure() }}
        run: |
          journalctl -ex | grep cheqd

  python-integration-tests:
    name: "Test: Cosmos SDK and identity integration"
    runs-on: ubuntu-latest

    steps:
      - name: Load binary artifact
        uses: actions/download-artifact@v3
        with:
          name: cheqd-noded
          path: /home/runner/.local/bin

      - name: Restore binary permissions
        run: sudo chmod +x /home/runner/.local/bin/cheqd-noded

      - name: Download node image
        uses: actions/download-artifact@v3
        with:
          name: cheqd-node-image.tar

      - name: Load node image
        run: docker load -i cheqd-node-image.tar

      - name: Check out
        uses: actions/checkout@v3

      - name: Set up 4 validators + 2 observers node docker pool
        working-directory: ./docker/localnet
        run: |
          bash gen-network-config.sh
          CHEQD_NODE_IMAGE=cheqd-node CHEQD_NODE_VERSION=latest docker compose up -d

      - name: Wait for chain
        run: bash tests/tools/wait-for-chain.sh

      - name: Set up test environment
        working-directory: ./tests/e2e-pytest
        run: |
          pip3 install -r requirements.txt >> /dev/null
          cp -Rf "${NODE_CONFIGS_BASE}"/validator-0/. /home/runner/.cheqdnode
          cp -Rf "${NODE_CONFIGS_BASE}"/validator-1/. /home/runner/.cheqdnode
          sudo chmod -R 777 /home/runner

      - name: Run cosmos-related tests
        working-directory: ./tests/e2e-pytest
        run: |
          set -euxo pipefail
          OP0_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" --home "${NODE_CONFIGS_BASE}/validator-0" | sed -nr 's/.*address: (.*?).*/\1/p' | sed 's/\r//g')
          export OP0_ADDRESS
          OP1_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" --home "${NODE_CONFIGS_BASE}/validator-1" | sed -nr 's/.*address: (.*?).*/\1/p' | sed 's/\r//g')
          export OP1_ADDRESS
          pytest -v -rP test_cosmos.py

      - name: Run identity-related tests # TODO: Move into separate stage?
        working-directory: ./tests/e2e-pytest
        run: |
          OP0_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" | sed -nr 's/.*address: (.*?).*/\1/p' | sed -n 1p | sed 's/\r//g')
          export OP0_ADDRESS
          OP1_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" | sed -nr 's/.*address: (.*?).*/\1/p' | sed -n 2p | sed 's/\r//g')
          export OP1_ADDRESS
          pytest -v -rP test_identity.py

  bash-integration-tests:
    name: "Test: Run bash based identity tests"
    runs-on: ubuntu-latest

    steps:
      - name: Load binary artifact
        uses: actions/download-artifact@v3
        with:
          name: cheqd-noded
          path: /home/runner/.local/bin

      - name: Restore binary permissions
        run: sudo chmod +x /home/runner/.local/bin/cheqd-noded

      - name: Download node image
        uses: actions/download-artifact@v3
        with:
          name: cheqd-node-image.tar

      - name: Load node image
        run: docker load -i cheqd-node-image.tar

      - name: Check out
        uses: actions/checkout@v3

      - name: Set up 4 validators + 2 observers node docker pool
        working-directory: ./docker/localnet
        run: |
          bash gen-network-config.sh
          CHEQD_NODE_IMAGE=cheqd-node CHEQD_NODE_VERSION=latest docker compose up -d

      - name: Wait for chain
        run: bash tests/tools/wait-for-chain.sh

      - name: Import keys
        working-directory: docker/localnet
        run: |
          bash import_keys.sh

      - name: Set up and run tests
        working-directory: tests/e2e-bash
        run: |
          bash run_all.sh

  node-upgrade-test:
    name: "Test: Run positive case for upgrade"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download cli image
        uses: actions/download-artifact@v3
        with:
          name: cheqd-cli-image.tar

      - name: Load cli image
        run: docker load -i cheqd-cli-image.tar

      - name: Chown for current user
        run: sudo chown "$USER":"$USER" .

      - name: Prepare nodes for checking upgrade
        working-directory: ./tests/e2e-complex/upgrade
        run: bash prepare.sh

      - name: Initiate the upgrade process
        working-directory: ./tests/e2e-complex/upgrade
        run: bash initiate_upgrade.sh

      - name: Make the upgrade and check results
        working-directory: ./tests/e2e-complex/upgrade
        run: bash upgrade_and_check.sh
