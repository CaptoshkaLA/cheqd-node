// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cheqd/credDef.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CredDef struct {
	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SchemaId   string   `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Tag        string   `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Type       string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Controller []string `protobuf:"bytes,5,rep,name=controller,proto3" json:"controller,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*CredDef_ClType
	//	*CredDef_AnyType
	Value isCredDef_Value `protobuf_oneof:"value"`
}

func (m *CredDef) Reset()         { *m = CredDef{} }
func (m *CredDef) String() string { return proto.CompactTextString(m) }
func (*CredDef) ProtoMessage()    {}
func (*CredDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc069326307a6009, []int{0}
}
func (m *CredDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredDef.Merge(m, src)
}
func (m *CredDef) XXX_Size() int {
	return m.Size()
}
func (m *CredDef) XXX_DiscardUnknown() {
	xxx_messageInfo_CredDef.DiscardUnknown(m)
}

var xxx_messageInfo_CredDef proto.InternalMessageInfo

type isCredDef_Value interface {
	isCredDef_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CredDef_ClType struct {
	ClType *CredDefValue `protobuf:"bytes,6,opt,name=cl_type,json=clType,proto3,oneof" json:"cl_type,omitempty"`
}
type CredDef_AnyType struct {
	AnyType *types.Any `protobuf:"bytes,7,opt,name=any_type,json=anyType,proto3,oneof" json:"any_type,omitempty"`
}

func (*CredDef_ClType) isCredDef_Value()  {}
func (*CredDef_AnyType) isCredDef_Value() {}

func (m *CredDef) GetValue() isCredDef_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CredDef) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CredDef) GetSchemaId() string {
	if m != nil {
		return m.SchemaId
	}
	return ""
}

func (m *CredDef) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *CredDef) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CredDef) GetController() []string {
	if m != nil {
		return m.Controller
	}
	return nil
}

func (m *CredDef) GetClType() *CredDefValue {
	if x, ok := m.GetValue().(*CredDef_ClType); ok {
		return x.ClType
	}
	return nil
}

func (m *CredDef) GetAnyType() *types.Any {
	if x, ok := m.GetValue().(*CredDef_AnyType); ok {
		return x.AnyType
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CredDef) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CredDef_ClType)(nil),
		(*CredDef_AnyType)(nil),
	}
}

type CredDefValue struct {
	Primary    map[string]*types.Any `protobuf:"bytes,1,rep,name=primary,proto3" json:"primary,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Revocation map[string]*types.Any `protobuf:"bytes,2,rep,name=revocation,proto3" json:"revocation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CredDefValue) Reset()         { *m = CredDefValue{} }
func (m *CredDefValue) String() string { return proto.CompactTextString(m) }
func (*CredDefValue) ProtoMessage()    {}
func (*CredDefValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc069326307a6009, []int{1}
}
func (m *CredDefValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredDefValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredDefValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredDefValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredDefValue.Merge(m, src)
}
func (m *CredDefValue) XXX_Size() int {
	return m.Size()
}
func (m *CredDefValue) XXX_DiscardUnknown() {
	xxx_messageInfo_CredDefValue.DiscardUnknown(m)
}

var xxx_messageInfo_CredDefValue proto.InternalMessageInfo

func (m *CredDefValue) GetPrimary() map[string]*types.Any {
	if m != nil {
		return m.Primary
	}
	return nil
}

func (m *CredDefValue) GetRevocation() map[string]*types.Any {
	if m != nil {
		return m.Revocation
	}
	return nil
}

func init() {
	proto.RegisterType((*CredDef)(nil), "cheqdid.cheqdnode.cheqd.CredDef")
	proto.RegisterType((*CredDefValue)(nil), "cheqdid.cheqdnode.cheqd.CredDefValue")
	proto.RegisterMapType((map[string]*types.Any)(nil), "cheqdid.cheqdnode.cheqd.CredDefValue.PrimaryEntry")
	proto.RegisterMapType((map[string]*types.Any)(nil), "cheqdid.cheqdnode.cheqd.CredDefValue.RevocationEntry")
}

func init() { proto.RegisterFile("cheqd/credDef.proto", fileDescriptor_bc069326307a6009) }

var fileDescriptor_bc069326307a6009 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x33, 0x49, 0xbb, 0xe9, 0xbe, 0x2d, 0x2a, 0x63, 0xc1, 0x18, 0x21, 0x84, 0x82, 0x10,
	0x05, 0x27, 0xb8, 0x22, 0x88, 0x27, 0x6d, 0x15, 0x2a, 0x78, 0x28, 0xf1, 0xcf, 0xc1, 0x4b, 0x99,
	0x9d, 0x99, 0x66, 0x83, 0xd9, 0x99, 0x75, 0x9a, 0x2d, 0xce, 0xb7, 0xf0, 0x63, 0x79, 0xec, 0x51,
	0x3c, 0xc9, 0xee, 0xb7, 0xf0, 0x24, 0x33, 0x93, 0x4a, 0x10, 0x0a, 0x0b, 0x5e, 0x92, 0x87, 0x87,
	0x79, 0x7e, 0xef, 0xbc, 0xef, 0x3b, 0x70, 0x9b, 0xcd, 0xc4, 0x17, 0x5e, 0x32, 0x2d, 0xf8, 0x2b,
	0x71, 0x46, 0x16, 0x5a, 0x75, 0x0a, 0xdf, 0x71, 0x66, 0xc3, 0x89, 0xfb, 0x4b, 0xc5, 0x85, 0x57,
	0xe9, 0xdd, 0x5a, 0xa9, 0xba, 0x15, 0xa5, 0x3b, 0x36, 0x5d, 0x9e, 0x95, 0x54, 0x1a, 0x9f, 0x49,
	0xf7, 0x6b, 0x55, 0x2b, 0x27, 0x4b, 0xab, 0xbc, 0x7b, 0xf0, 0x1b, 0x41, 0x7c, 0xe4, 0xd9, 0xf8,
	0x06, 0x84, 0x0d, 0x4f, 0x50, 0x8e, 0x8a, 0x71, 0x15, 0x36, 0x1c, 0xdf, 0x83, 0xf1, 0x39, 0x9b,
	0x89, 0x39, 0x3d, 0x6d, 0x78, 0x12, 0x3a, 0x7b, 0xc7, 0x1b, 0x6f, 0x38, 0xbe, 0x05, 0x51, 0x47,
	0xeb, 0x24, 0x72, 0xb6, 0x95, 0x18, 0xc3, 0x56, 0x67, 0x16, 0x22, 0xd9, 0x72, 0x96, 0xd3, 0x38,
	0x03, 0x60, 0x4a, 0x76, 0x5a, 0xb5, 0xad, 0xd0, 0xc9, 0x76, 0x1e, 0x15, 0xe3, 0x6a, 0xe0, 0xe0,
	0x17, 0x10, 0xb3, 0xf6, 0xd4, 0xc5, 0x46, 0x39, 0x2a, 0x76, 0x27, 0xf7, 0xc9, 0x35, 0xad, 0x91,
	0xfe, 0x96, 0x1f, 0x69, 0xbb, 0x14, 0xc7, 0x41, 0x35, 0x62, 0xed, 0x7b, 0x5b, 0xe1, 0x31, 0xec,
	0x50, 0x69, 0x3c, 0x22, 0x76, 0x88, 0x7d, 0xe2, 0x87, 0x40, 0xae, 0x86, 0x40, 0x5e, 0x4a, 0x73,
	0x1c, 0x54, 0x31, 0x95, 0xc6, 0x46, 0x0e, 0x63, 0xd8, 0xbe, 0xb0, 0x94, 0x83, 0x9f, 0x21, 0xec,
	0x0d, 0xb1, 0xf8, 0x2d, 0xc4, 0x0b, 0xdd, 0xcc, 0xa9, 0x36, 0x09, 0xca, 0xa3, 0x62, 0x77, 0x32,
	0xd9, 0xe8, 0x3a, 0xe4, 0xc4, 0x87, 0x5e, 0xcb, 0x4e, 0x9b, 0xea, 0x0a, 0x81, 0x3f, 0x00, 0x68,
	0x71, 0xa1, 0x18, 0xed, 0x1a, 0x25, 0x93, 0xd0, 0x01, 0x9f, 0x6e, 0x06, 0xac, 0xfe, 0xe6, 0x3c,
	0x73, 0x00, 0x4a, 0x4f, 0x60, 0x6f, 0x58, 0xcf, 0x6e, 0xe2, 0xb3, 0x30, 0xfd, 0xde, 0xac, 0xc4,
	0x0f, 0xfb, 0x06, 0xdd, 0xd2, 0xae, 0x19, 0x48, 0xe5, 0x8f, 0x3c, 0x0f, 0x9f, 0xa1, 0xf4, 0x1d,
	0xdc, 0xfc, 0xa7, 0xe0, 0xff, 0x43, 0x0f, 0x8f, 0xbe, 0xaf, 0x32, 0x74, 0xb9, 0xca, 0xd0, 0xaf,
	0x55, 0x86, 0xbe, 0xad, 0xb3, 0xe0, 0x72, 0x9d, 0x05, 0x3f, 0xd6, 0x59, 0xf0, 0xe9, 0x41, 0xdd,
	0x74, 0xb3, 0xe5, 0x94, 0x30, 0x35, 0x2f, 0xfb, 0xd7, 0x6d, 0xbf, 0x8f, 0xec, 0x30, 0xca, 0xaf,
	0xbd, 0x65, 0x17, 0x7a, 0x3e, 0x1d, 0x39, 0xfa, 0x93, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x94,
	0x58, 0x39, 0x05, 0x06, 0x03, 0x00, 0x00,
}

func (m *CredDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Controller) > 0 {
		for iNdEx := len(m.Controller) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Controller[iNdEx])
			copy(dAtA[i:], m.Controller[iNdEx])
			i = encodeVarintCredDef(dAtA, i, uint64(len(m.Controller[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCredDef(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintCredDef(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SchemaId) > 0 {
		i -= len(m.SchemaId)
		copy(dAtA[i:], m.SchemaId)
		i = encodeVarintCredDef(dAtA, i, uint64(len(m.SchemaId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCredDef(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredDef_ClType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredDef_ClType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClType != nil {
		{
			size, err := m.ClType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CredDef_AnyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredDef_AnyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyType != nil {
		{
			size, err := m.AnyType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CredDefValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredDefValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredDefValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Revocation) > 0 {
		for k := range m.Revocation {
			v := m.Revocation[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCredDef(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCredDef(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCredDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Primary) > 0 {
		for k := range m.Primary {
			v := m.Primary[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCredDef(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCredDef(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCredDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCredDef(dAtA []byte, offset int, v uint64) int {
	offset -= sovCredDef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CredDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCredDef(uint64(l))
	}
	l = len(m.SchemaId)
	if l > 0 {
		n += 1 + l + sovCredDef(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovCredDef(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCredDef(uint64(l))
	}
	if len(m.Controller) > 0 {
		for _, s := range m.Controller {
			l = len(s)
			n += 1 + l + sovCredDef(uint64(l))
		}
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *CredDef_ClType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClType != nil {
		l = m.ClType.Size()
		n += 1 + l + sovCredDef(uint64(l))
	}
	return n
}
func (m *CredDef_AnyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyType != nil {
		l = m.AnyType.Size()
		n += 1 + l + sovCredDef(uint64(l))
	}
	return n
}
func (m *CredDefValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Primary) > 0 {
		for k, v := range m.Primary {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCredDef(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCredDef(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCredDef(uint64(mapEntrySize))
		}
	}
	if len(m.Revocation) > 0 {
		for k, v := range m.Revocation {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCredDef(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCredDef(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCredDef(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCredDef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCredDef(x uint64) (n int) {
	return sovCredDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CredDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = append(m.Controller, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CredDefValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &CredDef_ClType{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Any{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &CredDef_AnyType{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredDefValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredDefValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredDefValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Primary == nil {
				m.Primary = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCredDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCredDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCredDef
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCredDef
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCredDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCredDef
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCredDef
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCredDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCredDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Primary[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Revocation == nil {
				m.Revocation = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCredDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCredDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCredDef
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCredDef
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCredDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCredDef
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCredDef
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCredDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCredDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Revocation[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCredDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCredDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCredDef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCredDef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCredDef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCredDef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCredDef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCredDef = fmt.Errorf("proto: unexpected end of group")
)
