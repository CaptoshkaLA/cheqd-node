// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cheqd/attrib.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Attrib struct {
	Did string   `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Raw []string `protobuf:"bytes,2,rep,name=raw,proto3" json:"raw,omitempty"`
}

func (m *Attrib) Reset()         { *m = Attrib{} }
func (m *Attrib) String() string { return proto.CompactTextString(m) }
func (*Attrib) ProtoMessage()    {}
func (*Attrib) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9f989a63ffe2b70, []int{0}
}
func (m *Attrib) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attrib) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attrib.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attrib) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attrib.Merge(m, src)
}
func (m *Attrib) XXX_Size() int {
	return m.Size()
}
func (m *Attrib) XXX_DiscardUnknown() {
	xxx_messageInfo_Attrib.DiscardUnknown(m)
}

var xxx_messageInfo_Attrib proto.InternalMessageInfo

func (m *Attrib) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *Attrib) GetRaw() []string {
	if m != nil {
		return m.Raw
	}
	return nil
}

func init() {
	proto.RegisterType((*Attrib)(nil), "cheqdid.cheqdnode.cheqd.Attrib")
}

func init() { proto.RegisterFile("cheqd/attrib.proto", fileDescriptor_b9f989a63ffe2b70) }

var fileDescriptor_b9f989a63ffe2b70 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xce, 0x48, 0x2d,
	0x4c, 0xd1, 0x4f, 0x2c, 0x29, 0x29, 0xca, 0x4c, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12,
	0x07, 0x8b, 0x65, 0xa6, 0xe8, 0x81, 0xe9, 0xbc, 0xfc, 0x94, 0x54, 0x08, 0x4b, 0x4a, 0x24, 0x3d,
	0x3f, 0x3d, 0x1f, 0xac, 0x46, 0x1f, 0xc4, 0x82, 0x28, 0x57, 0xd2, 0xe1, 0x62, 0x73, 0x04, 0x6b,
	0x17, 0x12, 0xe0, 0x62, 0x4e, 0xc9, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31,
	0x41, 0x22, 0x45, 0x89, 0xe5, 0x12, 0x4c, 0x0a, 0xcc, 0x20, 0x91, 0xa2, 0xc4, 0x72, 0x27, 0xe7,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39,
	0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x4c, 0xcf, 0x2c, 0xc9, 0x28,
	0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x87, 0xb8, 0x0a, 0x4c, 0xea, 0x82, 0x1c, 0xa0, 0x5f, 0x01,
	0x15, 0x2a, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0xdb, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x1f, 0x35, 0x52, 0xfd, 0xbe, 0x00, 0x00, 0x00,
}

func (m *Attrib) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attrib) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attrib) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Raw) > 0 {
		for iNdEx := len(m.Raw) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Raw[iNdEx])
			copy(dAtA[i:], m.Raw[iNdEx])
			i = encodeVarintAttrib(dAtA, i, uint64(len(m.Raw[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintAttrib(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttrib(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttrib(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Attrib) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovAttrib(uint64(l))
	}
	if len(m.Raw) > 0 {
		for _, s := range m.Raw {
			l = len(s)
			n += 1 + l + sovAttrib(uint64(l))
		}
	}
	return n
}

func sovAttrib(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttrib(x uint64) (n int) {
	return sovAttrib(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Attrib) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttrib
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attrib: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attrib: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrib
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttrib
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttrib
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrib
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttrib
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttrib
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttrib(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttrib
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttrib(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttrib
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttrib
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttrib
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttrib
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttrib
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttrib
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttrib        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttrib          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttrib = fmt.Errorf("proto: unexpected end of group")
)
